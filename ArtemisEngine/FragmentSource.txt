#version 330

uniform sampler2D myTexture;
uniform float alphaChannel;

in vec3 normal;
in vec2 vTexCoord;
in vec3 position;

out vec4 outColor;

const vec3 unifLightPosition = vec3(100.0, 100.0, 0.0);

const vec4 ambientColour = vec4(0.05, 0.05, 0.05, 1.0);
const vec4 specularColour = vec4(0.4, 0.4, 0.4, 1.0);

float r = 1000;
float fatt;
float kc = 1;
float kl = 2 / r;
float kq = 1 / pow(r, 2);

void main()
{
	vec3 lightDirection = unifLightPosition - position;

	float d = length(lightDirection);

	lightDirection = normalize(lightDirection);

	vec3 viewDirection = -normalize(position);
	
	float s = dot(-unifLightPosition, position);
	s = max(0, s);

	fatt = 1 / (kc + kl * d + kq * pow(d, 2));
	float diffuseIntensity = dot(normal, lightDirection);
	diffuseIntensity = max(0.0, diffuseIntensity);
	float specularIntensity = 0.0;

	if(diffuseIntensity > 0.0)
	{
		vec3 halfDirection = normalize(lightDirection + viewDirection);
		float specularAngle = dot(normal, halfDirection);
		specularAngle = max(0.0, specularAngle);
		specularIntensity = pow(specularAngle, 32.0);
	}

	vec4 diffuseColour = texture(myTexture, vTexCoord);

	outColor = (ambientColour + (diffuseIntensity * diffuseColour  + specularIntensity * specularColour)) * fatt;

	//outColor = texture2D(myTexture, vTexCoord);// + vec4(varyColor, alphaChannel);
}